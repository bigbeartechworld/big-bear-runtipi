version: "3"

services:
  planka:
    image: ghcr.io/plankanban/planka:1.17.2
    container_name: planka
    command: >
      bash -c
        "for i in `seq 1 30`; do
          ./start.sh &&
          s=$$? && break || s=$$?;
          echo \"Tried $$i times. Waiting 5 seconds...\";
          sleep 5;
        done; (exit $$s)"
    restart: unless-stopped
    volumes:
      - ${APP_DATA_DIR}/data/user-avatars:/app/public/user-avatars
      - ${APP_DATA_DIR}/data/project-background-images:/app/public/project-background-images
      - ${APP_DATA_DIR}/data/attachments:/app/private/attachments
    ports:
      - ${APP_PORT}:1337
    environment:
      - BASE_URL=${APP_PROTOCOL:-http}://${APP_DOMAIN}
      - TRUST_PROXY=1
      - DATABASE_URL="postgresql://postgres@postgres/planka"
      - SECRET_KEY="${PLANKA_SECRET_KEY}"
    networks:
      - tipi_main_network
    labels:
      # Main
      traefik.enable: true
      traefik.http.middlewares.planka-web-redirect.redirectscheme.scheme: https
      traefik.http.services.planka.loadbalancer.server.port: 1337
      # Web
      traefik.http.routers.planka-insecure.rule: Host(`${APP_DOMAIN}`)
      traefik.http.routers.planka-insecure.entrypoints: web
      traefik.http.routers.planka-insecure.service: planka
      traefik.http.routers.planka-insecure.middlewares: planka-web-redirect
      # Websecure
      traefik.http.routers.planka.rule: Host(`${APP_DOMAIN}`)
      traefik.http.routers.planka.entrypoints: websecure
      traefik.http.routers.planka.service: planka
      traefik.http.routers.planka.tls.certresolver: myresolver
      # Local domain
      traefik.http.routers.planka-local-insecure.rule: Host(`planka.${LOCAL_DOMAIN}`)
      traefik.http.routers.planka-local-insecure.entrypoints: web
      traefik.http.routers.planka-local-insecure.service: planka
      traefik.http.routers.planka-local-insecure.middlewares: planka-web-redirect
      # Local domain secure
      traefik.http.routers.planka-local.rule: Host(`planka.${LOCAL_DOMAIN}`)
      traefik.http.routers.planka-local.entrypoints: websecure
      traefik.http.routers.planka-local.service: planka
      traefik.http.routers.planka-local.tls: true
    # Dependency on another service, ensuring it is healthy before starting
    depends_on:
      postgres:
        condition: service_healthy

  postgres:
    image: postgres:14-alpine
    container_name: planka-db
    restart: unless-stopped
    volumes:
      - ${APP_DATA_DIR}/data/postgres:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: "planka"
      POSTGRES_HOST_AUTH_METHOD: "trust"
    networks:
      - tipi_main_network
    # Healthcheck configuration to ensure the database service is running properly
    # Runs a command inside the container at specified intervals to check the health of the service
    healthcheck:
      # Command to check if PostgreSQL is ready to accept connections
      # Uses `pg_isready` tool with the default 'postgres' user and the 'planka' database
      test: ["CMD-SHELL", "pg_isready -U postgres -d planka"]
      # The interval between running the healthcheck command
      # Here, it's set to run every 10 seconds
      interval: 10s
      # The timeout duration for the healthcheck command
      # If the command does not complete within 5 seconds, the healthcheck is considered failed
      timeout: 5s
      # Number of consecutive failures needed to consider the service as unhealthy
      retries: 5
