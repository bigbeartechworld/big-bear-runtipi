# Configuration for paperless-ngx setup

# Name of the big-bear-paperless-ngx application
name: big-bear-paperless-ngx
# Service definitions for the big-bear-paperless-ngx application
services:
  big-bear-paperless-ngx-broker:
    container_name: big-bear-paperless-ngx-broker
    image: docker.io/library/redis:8.2.2
    restart: unless-stopped
    volumes:
      - ${APP_DATA_DIR}/redis:/data
    networks:
      - tipi_main_network
    labels:
      runtipi.managed: "true"
  # The PostgreSQL database service is used to store the data for the paperless-ngx service.
  big-bear-paperless-ngx-db:
    # Container name
    container_name: big-bear-paperless-ngx-db
    # Image to be used for the container
    image: library/postgres:16
    # Container restart policy
    restart: unless-stopped
    # Volumes to be mounted to the container
    volumes:
      - ${APP_DATA_DIR}/postgres:/var/lib/postgresql/data
    # Environment variables
    environment:
      # PostgreSQL database name
      POSTGRES_DB: paperless
      # PostgreSQL database user
      POSTGRES_USER: bigbear
      # PostgreSQL database password
      POSTGRES_PASSWORD: c6e74adb-3fce-4318-b657-4bdc0858fcac
    # Networks to be used for the service
    networks:
      - tipi_main_network
    labels:
      runtipi.managed: "true"
  # The gotenberg service is used for converting documents to PDFs. It is
  # configured to disable JavaScript and only allow access to the
  # /tmp directory to prevent potential security issues.
  big-bear-paperless-ngx-gotenberg:
    container_name: big-bear-paperless-ngx-gotenberg
    image: gotenberg/gotenberg:8.24
    restart: unless-stopped
    # The gotenberg chromium route is used to convert .eml files. We do not
    # want to allow external content like tracking pixels or even javascript.
    # Therefore, we disable JavaScript and only allow access to the
    # /tmp directory.
    command:
      - "gotenberg"
      - "--chromium-disable-javascript=true"
      - "--chromium-allow-list=file:///tmp/.*"
    networks:
      - tipi_main_network
    labels:
      runtipi.managed: "true"
  # The Tika service is used to extract text from files. It is based on the
  # Apache Tika project and is configured to use the minimal image.
  big-bear-paperless-ngx-tika:
    container_name: big-bear-paperless-ngx-tika
    image: apache/tika:3.2.3.0
    restart: unless-stopped
    # The Tika service is connected to the big-bear-paperless-ngx-network
    # network.
    networks:
      - tipi_main_network
    labels:
      runtipi.managed: "true"
  paperless-ngx:
    # Name of the container
    container_name: paperless-ngx
    # Image to be used for the container
    image: ghcr.io/paperless-ngx/paperless-ngx:2.19.3
    # Container restart policy
    restart: unless-stopped
    # environment variables
    environment:
      PAPERLESS_REDIS: redis://big-bear-paperless-ngx-broker:6379
      PAPERLESS_DBHOST: big-bear-paperless-ngx-db
      PAPERLESS_DBUSER: bigbear
      PAPERLESS_DBPASS: c6e74adb-3fce-4318-b657-4bdc0858fcac
      PAPERLESS_ADMIN_USER: bigbear
      PAPERLESS_ADMIN_PASSWORD: c22e92a6-2a3d-4edf-a98e-4044834daea6
      PAPERLESS_TIKA_ENABLED: "true"
      PAPERLESS_TIKA_GOTENBERG_ENDPOINT: http://big-bear-paperless-ngx-gotenberg:3000
      PAPERLESS_TIKA_ENDPOINT: http://big-bear-paperless-ngx-tika:9998
      PAPERLESS_URL: http://[YOUR_IP]:8000
      COMPOSE_PROJECT_NAME: big-bear-paperless-ngx
      PAPERLESS_CSRF_TRUSTED_ORIGINS: http://[YOUR_IP]:8000
    # Volumes to be mounted to the container
    volumes:
      - ${APP_DATA_DIR}/paperless/data:/usr/src/paperless/data
      - ${APP_DATA_DIR}/paperless/media:/usr/src/paperless/media
      - ${APP_DATA_DIR}/paperless/export:/usr/src/paperless/export
      - ${APP_DATA_DIR}/paperless/consume:/usr/src/paperless/consume
    # Ports mapping between host and container
    ports:
      # Mapping port 8000 of the host to port 8000 of the container
      - "${APP_PORT}:8000"
    depends_on:
      - big-bear-paperless-ngx-db
      - big-bear-paperless-ngx-broker
    networks:
      - tipi_main_network
    labels:
      runtipi.managed: "true"
networks:
  tipi_main_network:
    external: true
